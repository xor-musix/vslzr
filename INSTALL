-------------------------------------------------------------------------------
 H O W   T O   B U I L D
-------------------------------------------------------------------------------
  Since v0.2 VSXu uses cmake. If you are unfamiliar with cmake, it's a Makefile
  generator much like automake.
  
  For backwards compatibility VSXu supports ./configure.
  
  A typical build looks like this:
  
    ./configure
    make
    sudo make install

    Then you can run the following programs:
      vsxu_artiste 
    and 
      vsxu_player
    with pulseaudio recording support for audio visualization.
    (for more sound input options see the section "Sound Inputs")
  
  Another typical build looks like this:
  
    ./configure --prefix=/home/user/bin/vsxu
    make
    make install
  
  VSXu will install the following:
  - vsxu_engine.so                 (into /usr/lib)
  - vsxu_engine_graphics.so        (into /usr/lib)
  - example files,
    gui skins,
    visualization projects         (into /usr/share/vsxu)
    
  The default build aims to installs vsxu as a standalone visualization program
  using pulseaudio (FMOD on windows). This should be OK for most distros since
  FMOD isn't free software.
  
  However VSXu can be built in many ways for a few different purpouses so please
  review your options.

-------------------------------------------------------------------------------
A D V A N C E D   B U I L D   O P T I O N S
-------------------------------------------------------------------------------

  You can bypass the configure script (it's only for the people not reading this
  file anyway).
  
  The concept is this:
  instead of "./configure", 
  run 
  "cmake . -DFLAG1=VALUE1 -DFLAG2=VALUE2..."
  
  Full list of build flags:
  
    -DCMAKE_INSTALL_PREFIX="/path/to/install/dir"
      sets installation path

    -DVSXU_STATIC=1
      build the engine static, with engine_graphics and all modules compiled in

    -DENGINE_SCRIPTING=1
      enables vsxl/gamemonkey (the scripting language in the engine)

    -DVSXU_DEBUG=1
      enables debug log/syslog messages and 
      enables debug symbols

    -DVSXU_SOUND_FMOD=1
      see next section

    -DVSXU_SOUND_MEDIA_PLAYER=1
      see next section

    -DVSXU_OPENGL_ES_2_0=1
      use opengl es 2.0 instead of regular opengl

    -DVSXU_MEEGO=1
      compile for meego

    -DOPTIMIZATION_FLAGS=1
      enable a lot of optimization flags (see cmake_globals.txt for info)


Examples:
  This is my test/debug-it-all command:
    cmake . -DVSXU_DEBUG=1 -DENGINE_SCRIPTING=1 -DCMAKE_INSTALL_PREFIX="/home/jaw/bin/vsxu_debug"

  This is my default personal installation:
    cmake . -DOPTIMIZATION_FLAGS=1 -DCMAKE_INSTALL_PREFIX="/home/jaw/bin/vsxu_0.3.0"

  For visualization (with pulseaudio) on Linux:
    cmake . -DCMAKE_INSTALL_PREFIX="/home/jaw/bin/vsxupulse"
	
  On Windows, with visual studio compiler and windows SDK

  NOTE! Before doing anything, check if you have:

    C:\Users\[user]\AppData\Roaming\QtProject

  if so, delete this directory. It contains Qt Creator config, and it has issues changing its config
  between 32-bit and 64-bit compiling so we need a truly fresh install.

  - Install CMake (cmake.org)
  - Install Windows SDK (for debugging) (https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk)
  - Install Visual C++ Build tools (http://landinghub.visualstudio.com/visual-cpp-build-tools)

Qt Creator (optional):
  - Install Qt Creator 4.1.0
  - In QtCreator Settings, Build & Run, Edit the "Default" kit and switch compiler from "x86" to "amd64". (optional)
  - Open the project (CMakeLists.txt)
  - Go to Projects, Build
  - Change build type to "Release With Debug Information". The game won't run in just "Debug" mode. (too slow)
  - Set CMAKE_MAKE_PROGRAM to the path of jom.exe (bundled with Qt Creator), for instance C:/Qt/qtcreator-4.1.0/bin/jom.exe

  NOTE! If you mess up, go and delete C:\Users\[user]\AppData\Roaming\QtProject


  To compile VSXU, put this in a .bat file:
    echo off
    set VSXU_BUILD_BASE_PATH=%CD%
    rmdir /s /q build
    md build
    cd build
    cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_GENERATOR="NMake Makefiles" ..\..\..\vsxu\
    C:\Qt\qtcreator-4.1.0\bin\jom install
